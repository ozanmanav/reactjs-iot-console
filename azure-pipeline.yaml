# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- dev

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  #dockerRegistryServiceConnection: '2dd8c990-2a0f-43fd-bc98-5e116d346812'
  dockerRegistryServiceConnection: 'FeynLabDevACR'
  imageRepository: 'console'
  containerRegistry: 'feynlabdevacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  kubernetesCluster: 'FeynLab-Dev-AKS'
  registrySecret: 'dev-regcred'
  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: $(tag)

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'manifests'
        targetPath: 'manifests'
- stage: DeployDev
  displayName: Deploy to dev stage
  dependsOn: Build

  variables:
  - name: k8sNamespace # Kubernetes Namespace to deploy to. This variable is scoped to the DeployDev stage.
    value: 'default'
      
  jobs:
  - deployment: DeployDev
    displayName: Deploy to dev job
    pool:
      vmImage: ubuntu-latest


    environment: 'dev' # name of the environment to target [env name.namespace]. This will pull in the Kubernetes service connection automatically

    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              manifests: $(System.ArtifactsDirectory)/manifests/*
              secretName: $(registrySecret)
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              kubernetesServiceConnection: $(kubernetesCluster)
              
